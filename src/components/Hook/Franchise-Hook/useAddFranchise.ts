import { useState } from "react";
import { createFranchiseCreate } from "../../api/Franchise-Api/FranchiseApi";

const zoneArray = [
  {
    label: "WEST-SOUTH",
    id: 1,
  },
  {
    label: "NORTH-EAST",
    id: 9,
  },
];

const stateOptions = [
  { value: "32", label: "Andaman & Nicobar (UT)" },
  { value: "9", label: "Andhra Pradesh" },
  { value: "10", label: "Arunachal Pradesh" },
  { value: "11", label: "Assam" },
  { value: "12", label: "Bihar" },
  { value: "33", label: "Chandigarh (UT)" },
  { value: "13", label: "Chhattisgarh" },
  { value: "34", label: "Dadra & Nagar Haveli and Daman & Diu (UT)" },
  { value: "35", label: "Delhi [National Capital Territory (NCT)]" },
  { value: "14", label: "Goa" },
  { value: "15", label: "Gujarat" },
  { value: "5", label: "Haryana" },
  { value: "4", label: "Himachal Pradesh" },
  { value: "36", label: "Jammu & Kashmir (UT)" },
  { value: "16", label: "Jharkhand" },
  { value: "17", label: "Karnataka" },
  { value: "18", label: "Kerala" },
  { value: "37", label: "Ladakh (UT)" },
  { value: "38", label: "Lakshadweep (UT)" },
  { value: "8", label: "Madhya Pradesh" },
  { value: "1", label: "Maharashtra" },
  { value: "19", label: "Manipur" },
  { value: "20", label: "Meghalaya" },
  { value: "21", label: "Mizoram" },
  { value: "22", label: "Nagaland" },
  { value: "23", label: "Odisha" },
  { value: "3", label: "Panjim" },
  { value: "39", label: "Puducherry (UT)" },
  { value: "24", label: "Punjab" },
  { value: "25", label: "Rajasthan" },
  { value: "26", label: "Sikkim" },
  { value: "27", label: "Tamil Nadu" },
  { value: "29", label: "Telangana" },
  { value: "28", label: "Tripura" },
  { value: "2", label: "Uttar Pradesh" },
  { value: "30", label: "Uttarakhand" },
  { value: "31", label: "West Bengal" },
];

const franchiseOptions = [
  { value: 1, label: "COCO Franchise" },
  { value: 2, label: "FOFO Franchise" },
  { value: 0, label: "Other Franchise" },
];

const useAddFranchise = () => {
  const [formData, setFormData] = useState({
    name: "",
    icon: null as File | null,
    photo: "" as string | null,
    photo2: null as File | null,
    featured: 0,
    prodtype: 0,
    status: 1,
    srno: 1.0,
    createddate: new Date().toISOString(), // ISO string format
    modifieddate: null as string | null,
    roll: 5,
    createdby: 2091,
    modifiedby: 0,
    push_flag: false,
    delete_flag: false,
    modified_time: new Date().toISOString(),
    franchiseName: "",
    shopName: "",
    emailId: "",
    mobileNo: "",
    anotherMobileNo: "",
    shopLocation: "",
    details: "",
    address: "",
    sellBy: "",
    sellAmount: "",
    sellDate: "",
    franchiseType: "",
    latitude: "",
    longitude: "",
    FrontAdharcardPhoto: "" as string | null,
    BackAdharcardPhoto: "" as string | null,
    AdharNo: "" as string | number,
    PanNo: "" as string | number,
    FrontPanPhoto: "" as string | null,
    BackPanPhoto: "" as string | null,
    GSTINNo: "" as string | number,
    gstCretificate: "" as string | null,
    GumastaNo: "" as string | number,
    GumastaCretificate: "" as string | null,
    MSMENo: "" as string | number,
    MSMECertificate: "" as string | null,
    UploadFoodLicense: "" as string | null,
    UploadFoodLicenseReceipt: "" as string | null,
    UploadAgreementCopy: "" as string | null,
    BankHolderName: "",
    BankName: "",
    AccountNo: "" as string | number,
    Branch: "",
    IFSCCode: "",
    UPIID: "",
    BankAccountStatus: "",
    selectedZone: "" as String,
    StateId: 0 as number,
  });
  const [message, setMessage] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const handleChange = (e: any) => {
    const { name, value, files } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: files && files.length > 0 ? files[0] : value,
    }));
    if (files) {
      const url = URL.createObjectURL(files[0]);
      setFormData((prev) => ({
        ...prev,
        photo: url,
      }));
    }
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return "";
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const year = date.getFullYear();
    return `${day}-${month}-${year}`;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setMessage(null);
    setIsLoading(true);

    const payload = {
      ShopName: formData.shopName,
      Fname: formData.franchiseName,
      Lattitude: formData.latitude,
      Longitude: formData.longitude,
      Details: formData.details,
      Location: formData.shopLocation,
      Phone: formData.mobileNo,
      Phone2: formData.anotherMobileNo,
      EmailId: formData.emailId,
      SellAmt: formData.sellAmount,
      SellDate: formatDate(formData.sellDate),
      TypeOfVendor: formData.franchiseType,
      AadharNo: formData.AdharNo,
      AadharCard: formData.FrontAdharcardPhoto,
      AadharCard2: formData.BackAdharcardPhoto,
      Address: formData.address,
      PanNo: formData.PanNo,
      PanCard: formData.FrontPanPhoto,
      PanCard2: formData.BackPanPhoto,
      GstNo: formData.GSTINNo,
      GstCertificate: formData.gstCretificate,
      GumastaNo: formData.GumastaNo,
      Gumasta: formData.GumastaCretificate,
      MsmeNo: formData.MSMENo,
      Msme: formData.MSMECertificate,
      FoodLicence: formData.UploadFoodLicense,
      FoodLicenceReceipt: formData.UploadFoodLicenseReceipt,
      AgreementCopy: formData.UploadAgreementCopy,
      BankName: formData.BankName,
      AccountName: formData.BankHolderName,
      AccountNo: formData.AccountNo,
      Branch: formData.Branch,
      IfscCode: formData.IFSCCode,
      UpiNo: formData.UPIID,
      Status: formData.status,
      CustomerId: "",
      ColgId: "",
      Mname: "",
      Lname: "",
      Password: "",
      CountryId: "",
      StateId: "",
      CityId: "",
      AreaId: "",
      Pincode: "",
      Photo: "",
      Photo2: "",
      Photo3: "",
      Roll: formData.roll,
      CreatedBy: "",
      ModifiedBy: "",
      CreatedDate: formatDate(new Date().toISOString()),
      ModifiedDate: formatDate(new Date().toISOString()),
      Options: "",
      BranchId: "",
      Dob: formatDate(new Date().toISOString()),
      Area: "",
      UserType: "",
      PayMode: "",
      UnderUser: "",
      InspectionDate: formatDate(new Date().toISOString()),
      CommissioningDate: formatDate(new Date().toISOString()),
      CustType: "",
      CatId: "",
      CompName: "",
      CompAddress: "",
      CompPhone: "",
      AuthorName: "",
      Tokens: "",
      CompId: "",
      FatherPhone: "",
      Designation: "",
      BloodGroup: "",
      JoinDate: formatDate(new Date().toISOString()),
      EmailId2: "",
      PerDaySalary: 0,
      Barcode: "",
      KycStatus: "",
      KycDate: formatDate(new Date().toISOString()),
      Profession: "",
      FsiicNo: "",
      ShopActNo: "",
      AnniversaryDate: formatDate(new Date().toISOString()),
      ExeId: "",
      UnderFr: "",
      ReportingMgr: "",
      ResignStatus: "",
      ResignDate: formatDate(new Date().toISOString()),
      ResignComment: "",
      BillSoftFrId: "",
      PkgId: "",
      PkgAmt: 0,
      PkgDiscount: 0,
      PkgDate: formatDate(new Date().toISOString()),
      PkgValidity: formatDate(new Date().toISOString()),
      Prime: "",
      terms_condition: "",
      bottom_title: "",
      ReferCode: "",
      OwnFranchise: "",
      PrintCompName: "",
      PrintMobNo: "",
      TableQrCode: "",
      SalaryType: "",
      CreditSalaryStatus: "",
      IdStatus: "",
      selectedZone: "",
      CocoFranchiseAccess: "",
      CinNo: "",
      push_flag: "",
      delete_flag: "",
      modified_time: formatDate(new Date().toISOString()),
      UnderFrId: "",
      ShowFrStatus: "",
      ReferalNo1: "",
      ReferalNo2: "",
      NomineePartnerName: "",
      NomineePartnerRelation: "",
      NomineePartnerPhone: "",
      BillAmount: 0,
      ExpCatId: "",
      MainBrEmp: "",
      ExpApproval: "",
      UnderByUser: "",
      DeliveryPerson: "",
      ChequeBook: "",
      TradeName: "",
      AllocateProd: "",
      AllocateRawProd: "",
    };

    try {
      const response = await createFranchiseCreate(payload);
      if (response.status === 201) {
        setMessage("Franchise added successfully!");
        setFormData({
          name: "",
          icon: null,
          photo: "",
          photo2: null,
          featured: 0,
          prodtype: 0,
          status: 1,
          srno: 1.0,
          createddate: new Date().toISOString(),
          modifieddate: null,
          roll: 5,
          createdby: 2091,
          modifiedby: 0,
          push_flag: false,
          delete_flag: false,
          modified_time: new Date().toISOString(),
          franchiseName: "",
          shopName: "",
          emailId: "",
          mobileNo: "",
          anotherMobileNo: "",
          shopLocation: "",
          details: "",
          address: "",
          sellBy: "",
          sellAmount: "",
          sellDate: "",
          franchiseType: "",
          latitude: "",
          longitude: "",
          FrontAdharcardPhoto: "",
          BackAdharcardPhoto: "",
          AdharNo: 0,
          PanNo: 0,
          FrontPanPhoto: "",
          BackPanPhoto: "",
          GSTINNo: 0,
          gstCretificate: "",
          GumastaNo: 0,
          GumastaCretificate: "",
          MSMENo: 0,
          MSMECertificate: "",
          UploadFoodLicense: "",
          UploadFoodLicenseReceipt: "",
          UploadAgreementCopy: "",
          BankHolderName: "",
          BankName: "",
          AccountNo: 0,
          Branch: "",
          IFSCCode: "",
          UPIID: "",
          BankAccountStatus: "",
          selectedZone: "",
          StateId: 0,
        });
      } else {
        setMessage(`Error: Failed to add Franchise.`);
      }
    } catch (err: any) {
      console.error("Error during Add Franchise creation:", err);
      setMessage("Network error. Please try again later.");
    } finally {
      setIsLoading(false);
    }
  };

  return {
    formData,
    message,
    isLoading,
    zoneArray,
    stateOptions,
    franchiseOptions,
    handleChange,
    handleSubmit,
    setFormData,
  };
};

export default useAddFranchise;
